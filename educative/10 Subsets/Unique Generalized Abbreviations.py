'''
Unique Generalized Abbreviations

Given a word, write a function to generate all of its unique generalized abbreviations.

Generalized abbreviation of a word can be generated by replacing each substring of the word by the count of characters
in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. After replacing these
substrings in the actual word by the count of characters we get all the generalized abbreviations:
“ab”, “1b”, “a1”, and “2”.

Example 1:
Input: "BAT"
Output: "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"

Example 2:
Input: "code"
Output:
"code", "cod1", "co1e", "co2", "c1de", "c1d1", "c2e", "c3", "1ode", "1od1", "1o1e", "1o2", "2de", "2d1", "3e", "4"
'''


def generate_generalized_abbreviation(word):
    result = []
    n = len(word)
    result.append(word)

#    for window_len in range(1, n-1, 1):
    for i in range(n-1, -1, -1):
        step = n - i
        for ind in range(len(result)):
            current_word = list(result[ind])
            for j in range(len(current_word) - step, -1, -step):
                new_word = current_word[0:j]
                new_word.append(str(step))
                new_word += current_word[(j+step):]
                result.append(''.join(new_word))

    return result


def main():
    print("Generalized abbreviation are: " +
          str(generate_generalized_abbreviation("BAT")))
    print("Generalized abbreviation are: " +
          str(generate_generalized_abbreviation("code")))


main()
